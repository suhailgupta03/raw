package tests

import (
	"encoding/json"
	"github.com/stretchr/testify/assert"
	"raw/src/api"
	"raw/src/core"
	"raw/src/parser"
	"raw/src/structs"
	"runtime"
	"testing"
)

type TestData struct {
	Schema structs.Schema         `json:"schema"`
	Name   string                 `json:"name"`
	Data   map[string]interface{} `json:"data"`
}

var (
	testConfig = InitTestConfig()
)

func getDataForWriteTest(t *testing.T) TestData {
	_, filename, _, _ := runtime.Caller(0)
	data := GetTestFileData(t, filename)
	testData := TestData{}
	json.Unmarshal(data, &testData)
	return testData
}

func TestCreateRecord(t *testing.T) {
	testRecord := getDataForWriteTest(t)
	parseError, parseSuccess := parser.Parse(testRecord.Schema)
	assert.True(t, parseSuccess, "Parse function should succeed")
	assert.Equal(t, "", parseError.Message)

	raw := api.Raw{Root: testConfig.DatabaseRoot}
	model := raw.DefineModel(api.Model{
		Name:   testRecord.Name,
		Schema: testRecord.Schema,
	})

	createdRecord, cErr := model.Create(api.Create{
		Values: testRecord.Data,
	})

	assert.True(t, cErr == nil, "Record must be created")
	assert.Equal(t, testRecord.Data["batch_id"], createdRecord["batch_id"])
}

func TestCreateRecordWithoutPrimaryKey(t *testing.T) {
	testRecord := getDataForWriteTest(t)
	parseError, parseSuccess := parser.Parse(testRecord.Schema)
	assert.True(t, parseSuccess, "Parse function should succeed")
	assert.Equal(t, "", parseError.Message)

	raw := api.Raw{Root: testConfig.DatabaseRoot}
	model := raw.DefineModel(api.Model{
		Name:   testRecord.Name,
		Schema: testRecord.Schema,
	})

	createdRecord, cErr := model.Create(api.Create{
		Values: testRecord.Data,
	})

	assert.True(t, cErr == nil, "Record must be created")
	assert.True(t, createdRecord[parser.DefaultPrimaryKey] != nil, "Primary key must be generated by the system")
}

func TestCreateRecordWithDuplicatePrimaryKey(t *testing.T) {
	testRecord := getDataForWriteTest(t)
	parseError, parseSuccess := parser.Parse(testRecord.Schema)
	assert.True(t, parseSuccess, "Parse function should succeed")
	assert.Equal(t, "", parseError.Message)

	raw := api.Raw{Root: testConfig.DatabaseRoot}
	model := raw.DefineModel(api.Model{
		Name:   testRecord.Name,
		Schema: testRecord.Schema,
	})

	createdRecord, cErr := model.Create(api.Create{
		Values: testRecord.Data,
	})

	assert.True(t, cErr == nil, "Record must be created")
	assert.True(t, createdRecord["batch_id"] == testRecord.Data["batch_id"], "Record must be created the first time")

	duplicateRecord, drErr := model.Create(api.Create{
		Values: testRecord.Data,
	})

	assert.True(t, drErr != nil, "Record must not be created")
	assert.Contains(t, drErr.Error(), core.PrimaryKeyConstraintViolated)
	assert.Nil(t, duplicateRecord, "Duplicate record must be nil")
}
